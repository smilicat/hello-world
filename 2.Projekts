#include <iostream>
#include <string>
#include <conio.h>

using namespace std;
/*
 2. praktiskais darbs "Mantošana"
 Autors   : Kirils Volobujevs
 Grupa    : P2-4
 Variants : 8 "Mebeles"
 Uzdevums :
 Izveidot sava individuālā varianta bāzes klasi ar trīs atribūtiem: publisko, aizsargāto un privāto.

 Izveidot divus konstruktorus (vienu – bez parametriem), kas inicializē klases atribūtus un destruktoru,
 kas paziņo par objekta iznīcināšanu.

 Izveidojiet set un get metodes privātajam un aizsargātajam atribūtam. Izveidot print metodi
 un kādu savu metodi, kas veic aprēķinus (ja iespējams, tad ar klases atribūtiem) un atgriež vērtību.

 Izveidot atvasināto klasi, kura publiski manto bāzes klasei un papildina bāzes klasi
 ar diviem privātiem atribūtiem. Pievienot atbilstošās set un get metodes.

 Izveidot divus konstruktorus, kas inicializē jaunos klases atribūtus un destruktoru. Vienam no tiem
 atklātā veidā jāizsauc bāzes klases konstruktoru, nododot tam parametrus.

 Pārdefinējiet bāzes klases metodi print, lai tā izdrukātu visu atribūtu vērtības.

 Nodemostrēt visu metožu izsaukumu, izveidojot gan bāzes klases, gan atvasinātās klases objektus.
 */

class Furniture {
private:
	//Bazes klases privatais mainigais ,kurs neattiecas uz SoftFur
	string furniture_color;

protected:
	//Mainigie ,kurus var pieskirt tikai Furniture un SoftFur
	static int furniture_count;
	float furniture_price;

public:
	// Mainigie ,kurus var brivi izmantot visā programmā
	string furniture_name;
	string order_date;

	// Constructor
	Furniture();
	// Overloaded constructor
	Furniture(string,string, float);
	// Deconstructor
	~Furniture();
	// FurnitureName
	string getFurnitureName();
	void setFurnitureName(string);
	// FurnitureColor
	string getFurnitureColor();
	void setFurnitureColor(string);
	// FurniturePrice
	void setFurniturePrice(float);
	// PrintOrder
	void printOrder();
	// CreditMethode
	float credit(float, int);
};
//Static integer
int Furniture::furniture_count = 0;

// Constructor
Furniture::Furniture() {
	this->furniture_count++;
	this->furniture_name = "Galds";
	this->furniture_color = "Yellow";
	this->furniture_price = 780.1;
}

// Overloaded constructor
Furniture::Furniture(string name,string color, float price) {
	this->furniture_name = name;
	this->furniture_color = color;
	this->furniture_price = price;
}

// Deconstructor
Furniture::~Furniture() {
	cout << endl << " Dzestas preces  numurs : " << furniture_count << endl <<
		"Preces nosaukums : " << furniture_name;
	furniture_count--;
	getch();

}

// Metodes FurnitureName
string Furniture::getFurnitureName() {
	return furniture_name;
}

void Furniture::setFurnitureName(string name) {
	this->furniture_name = name;
}

// Metodes FurnitureColor
string Furniture::getFurnitureColor() {
	return furniture_color;
}

void Furniture::setFurnitureColor(string color) {
	this->furniture_color = color;
}
// Metodes furniturePrice
void Furniture::setFurniturePrice(float price) {
	this->furniture_price = price;
}
// Kredita aprekina metode
float Furniture::credit(float furniture_price, int month) {
	return this->furniture_price / month;
}
// printOrder
void Furniture::printOrder() {
	cout << "Main Preces Mebele nr." << furniture_count << endl <<
		"Mebeles nosaukums : " << furniture_name << endl <<
		"Mebeles Krasas : " << furniture_color << endl << "Mebeles cena : " <<
		furniture_price << endl;
}

// Secondary Class SoftFur
class SoftFur : public Furniture {
private:
	string softFur_serial;
	string softFur_date;

public:

	// Serial
	string getSerial();
	void setSerial(string serial);
	// Date
	string getDate();
	float credit(float ,int);
	void setDate(string date);
	// Print Order
	void printOrder();

	// Atvasinatas Class Constructor
	SoftFur(string serial, string date, string name,string color, float price) : Furniture(name,color, price) {
		this->furniture_name = name;
		this->furniture_price = price;
		this->softFur_serial = serial;
		this->softFur_date = date;
	}

};
// Serial metodes
string SoftFur::getSerial() {
	return this->softFur_serial;
}
void SoftFur::setSerial(string serial) {
	this->softFur_serial = serial;
}
// Date metodes
string SoftFur::getDate() {
	return this->softFur_date;
}
void SoftFur::setDate(string date) {
	this->softFur_date = date;
}
// Atvasina bazes klases metodi Credit()
float SoftFur::credit(float furniture_price, int month) {
	return this->furniture_price * month;
}
// Mikstas mebeles  : Print order
void SoftFur::printOrder() {
	cout << "Mebele numur." << this->furniture_count << endl;
	cout << "Mebeles nosaukums :" << this->getFurnitureName() << endl;
	cout << "Mebeles Krasa : " << this->getFurnitureColor() << endl;
	cout << "Summa: " << this->furniture_price << " EUR" << endl;
	cout << "Pasutijums Nr. " << this->getSerial() << endl;
	cout << "Datums: " << this->getDate() << endl;
}

int main() {
	clrscr();
	int month;
	float price,pay;
	string name, color;
	/*
	 [int] Month - Variable for funtion Credit
	 [float] Price - Variable for furniture_price
	 [string] Name - Variable for furniture_name
	 Color - Variable for furniture_color
	 */
	cout << "Ievadiet preces nosaukumu : ";
	cin >> name;
	cout << "Ievadiet preces krasu : ";
	cin >> color;
	cout << "Ievadiet preces cenu : ";
	cin >> price;

	cout << "Ievadiet menesu skaitu : ";
	cin >> month;

	clrscr();
	Furniture t1;
	t1.setFurnitureName(name);
	t1.setFurnitureColor(color);
	t1.setFurniturePrice(price);
	t1.printOrder();
	// Bazes metode
	cout << "Preces iemaksas cena : " <<t1.credit(price,month) << endl;
	Furniture t3;
	t3.printOrder();



	// Constructor to give serial and date
	SoftFur *t2 = new SoftFur("123987", "31.12.2013","Stool","Yellow",512);
	t2->printOrder();
	// Atvasinata metode
	cout << "Preces var nopirkte : " << t2->credit(price,month)<< endl;



	delete t2;

	return 0;
}
